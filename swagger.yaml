swagger: '2.0'
info:
  version: '1.0'
  title: Vipps eCommerce APIs v2
  description: >2+

    **IMPORTANT!!!!** We are preparing the documentation and will update this site regularly. This notice will remain until the site is ready for initial use. Please refer to our current [portal for developers](https://www.vipps.no/bedrift/utvikler) in the meantime.

    # Vipps API Developer Documentation

    Vipps eCommerce API gives merchant a great control over Vipps payment lifecycle. It gives the possibility to initiate payment from mobile app and webshop. It also enables the merchant to affect payment flow by utilizing functions like payment reservation, capture, cancellation and refunding.


    # Use case scenarios

    In order to ease the integration with Vipps and get a better understanding of API functionality and usage of some typical scenarios are presented.

    # API Calls flow

    This section will explain how merchants can start using Vipps APIs and get access to API credentials.

    During the merchantâ€™s onboarding process in Vipps, the merchant receives a username and a password to login into the Merchant Developer Portal (manual to use merchant developer portal can be found here). Once logged in to the developer portal, the merchant needs to register an application to generate a JWT access token and use the token in the authorization header of the request. The diagram below shows the integration flow between merchant and Vipps server.

    All communication with the Vipps ecommerce API has to be authenticated via JWT access token. To get this access token and use it in API calls merchant should follow the steps below:
     * Merchant logs into the Developer portal and registers an application that will consume Vipps APIs. On successful registration, it will receive application credentials (ClientId and ClientSecret).
     * Merchant application uses the clientid and clientsecret to get a JWT access token from APIM. JWT access token is a base 64 encoded string value that needs to be used as a bearer token in the request header.
     * Merchant application will have to use this JWT access token, APIM subscription key and App Id(clientid) along with other request parameters while calling a Vipps API.
     * APIM validates the JWT access token and subscription key. If the token is invalid it responds with 401 unauthorized while if it is valid, the request is forwarded to Vipps. Vipps process the request and produce a corresponding response which is sent back to merchant application via APIM.
    # Idempotency

    All API requests in Vipps eCommerce can be retried without any side effects by providing idempotent key in a header of  the request. For example, in case the request fails because of network error it can safely be retried with the same idempotent key. Idempotent key is generated by merchant.
      ```
      {
        -H "X-Request-Id: slvnwdcweofjwefweklfwelf"
      }
      ```

    # Authentication

    Every API call is authenticated and authorized based on the application Authorization token (JWT Bearer token) and APIM subscription key (Ocp-Apim-Subscription-Key). In addition, APP Id need to be provided in request header in order to authenticate the application the merchant has registered. Following headers are required to be there in every API request to successfully authenticate every API call.

      | **Header Name** | **Header Value** | **Description** |
      | :-------------------------- | :--------------------------- | :--------------------------------------------- |
      | Authorization | Bearer 'jwt_access_token'' | type: Authorization token<br>Value: Access token is obtained by registering merchant backend application in Merchant Developer Portal. |
      | Ocp-Apim-Subscription-Key | Base 64 encoded string | Subscription key for eCommerce product.<br>This can be found in User Profile page on Merchant developer portal after merchant account is created |

host: apitest.vipps.no
basePath: /
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /accesstoken/get:
    post:
      description: Authorization token API endpoint helps to get the JWT Bearer token that needs to be passed in every API request in the authorization header. The merchant application use the API to get a JWT access token. JWT access token is a base 64 encoded string value that must be aquire first before making any Vipps api calls
      summary: Fetch authorization token
      tags:
      - accesstoken
      operationId: AccesstokenGetPost
      produces:
      - application/json
      parameters:
      - name: Accept
        in: header
        required: true
        type: string
        description: ''
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: client_id
        in: header
        required: true
        type: string
        description: ''
      - name: client_secret
        in: header
        required: true
        type: string
        description: ''
      - name: ocp-apim-subscription-key
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
  /[consetRemovalPrefix]/v2/consents/{userId}:
    delete:
      description: This API allows Vipps to send consent removal request to merchant. After this the merchant is obliged to remove the user details from merchant system permanently, as per the GDPR guidelines.
      summary: Remove User Consent (for express checkout)
      tags:
      - '[consetRemovalPrefix]'
      operationId: ConsetRemovalPrefixV2ConsentsByUserIdDelete
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        required: true
        type: string
        description: ''
      - name: Accept
        in: header
        required: true
        type: string
        description: ''
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
  /[shippingDetailsPrefix]/v2/payments/{orderId}/shippingDetails:
    post:
      description: This API call allows Vipps to get the shipping cost and method based on the provided address and product details. Primarily use of this service is meant for ecomm express checkout where Vipps needs to present shipping cost and method  to the vipps user. This service is to be implemented by merchants.
      summary: Fetch Shipping Cost & Method
      tags:
      - '[shippingDetailsPrefix]'
      operationId: ShippingDetailsPrefixV2PaymentsShippingDetailsByOrderIdPost
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        required: true
        type: string
        description: ''
      - name: Accept
        in: header
        required: true
        type: string
        description: ''
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          type: string
      responses:
        200:
          description: ''
  /ecomm/v2/payments:
    post:
      description: The API Call allows the merchants to initiate a payment flow by using Vipps.In order to identify sales channel payments are coming from, a merchantSerialNumber is used to distinguish between them. Please note that a single payment is uniquely identified by a composite of merchantApplicationId (X-App-ID), merchantSerialNumber and orderId. The Merchant provided orderId must be unique per sales channel. Once successfully initiated the transaction in Vipps, it will give you the redirect URL in response which has to be used by the merchant to open the Vipps landing page. The landing page will have functionality to identify and differentiate request coming from mobile browser/desktop browser.
      summary: Initiate Payment
      tags:
      - ecomm
      operationId: EcommV2PaymentsPost
      produces:
      - application/json
      parameters:
      - name: Accept
        in: header
        required: true
        type: string
        description: ''
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: Ocp-Apim-Subscription-Key
        in: header
        required: true
        type: string
        description: ''
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/InitiatePaymentrequest'
      responses:
        200:
          description: ''
  /ecomm/v2/payments/{orderId}:
    post:
      description: This API allows Vipps to send the transaction details. During regular ecomm payment order and transaction details will be shared. During express checkout payment it will provide user details and shipping details addition to the order and transaction details.
      summary: 'Callback : Transaction Update'
      tags:
      - ecomm
      operationId: EcommV2PaymentsByOrderIdPost
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        required: true
        type: string
        description: ''
      - name: Accept
        in: header
        required: true
        type: string
        description: ''
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          type: string
      responses:
        200:
          description: ''
  /ecomm/v2/payments/{orderId}/cancel:
    put:
      description: The API call allows merchant to cancel the reserved transaction, The API will not allow partial cancellation which has the consequence that partially captured transactions cannot be cancelled. Please note that in a case of communication errors during initiate payment service call between Vipps and PSP/Acquirer/Issuer; even in a case that customer has confirmed a payment, the payment will be cancelled by Vipps. Note this means you can not cancel a captured payment.
      summary: Cancel Payment
      tags:
      - ecomm
      operationId: EcommV2PaymentsCancelByOrderIdPut
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        required: true
        type: string
        description: ''
      - name: Accept
        in: header
        required: true
        type: string
        description: ''
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          type: string
      responses:
        200:
          description: ''
  /ecomm/v2/payments/{orderId}/capture:
    post:
      description: The API call allows merchant to capture the reserved amount. Amount to capture cannot be higher than reserved. The API also allows capturing partial amount of the reserved amount. Partial capture can be called as many times as required so long there is reserved amount to capture. Transaction text is not optional and is used as a proof of delivery (tracking code, consignment number etc.). In a case of direct capture, both fund reservation and capture are executed in a single operation.
      summary: Capture Payment
      tags:
      - ecomm
      operationId: EcommV2PaymentsCaptureByOrderIdPost
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        required: true
        type: string
        description: ''
      - name: Accept
        in: header
        required: true
        type: string
        description: ''
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          type: string
      responses:
        200:
          description: ''
  /ecomm/v2/payments/<order_id>/details:
    get:
      description: The API allows merchant to get the details of a payment transaction. Service call returns detailed transaction history of given payment where events are sorted by the time single transaction occurred.
      summary: Get payment Details
      tags:
      - ecomm
      operationId: EcommV2PaymentsOrderIdDetailsGet
      produces:
      - application/json
      parameters:
      - name: Accept
        in: header
        required: true
        type: string
        description: ''
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
  /ecomm/v2/payments/{orderId}/refund:
    post:
      description: The API allows a merchant to do a refund of already captured transaction. There is an option to do a partial refund of the captured amount. Refunded amount cannot be larger than captured. Timeframe for issuing a refund for a payment is 365 days from the date payment has been captured. If the refund payment service call is called after the refund timeframe, service call will respond with an error. Refunded funds will be transferred from the merchant account to the customer credit card that was used in payment flow. Pay attention that in order to perform refund, there must be enough funds at merchant settlements account.
      summary: Refund Payment
      tags:
      - ecomm
      operationId: EcommV2PaymentsRefundByOrderIdPost
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        required: true
        type: string
        description: ''
      - name: Accept
        in: header
        required: true
        type: string
        description: ''
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          type: string
      responses:
        200:
          description: ''
  /ecomm/v2/payments/{orderId}/status:
    get:
      description: The API call allows the merchant to get the status of the last payment transaction. Primarily use of this service is meant for inApp where simple response to check order status is preferred.
      summary: Get order status
      tags:
      - ecomm
      operationId: EcommV2PaymentsStatusByOrderIdGet
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        required: true
        type: string
        description: ''
      - name: Accept
        in: header
        required: true
        type: string
        description: ''
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
definitions:
  InitiatePaymentrequest:
    title: Initiate PaymentRequest
    example:
      customerInfo:
        mobileNumber: 48059106
      merchantInfo:
        authToken: Values with length 255
        callbackPrefix: https://www.domain.no/ecomm
        consentRemovalPrefix: Values with length 255
        fallBack: https://vecom-staging.vipps.io/api/v2/payments/fallBack
        isApp: false
        merchantSerialNumber: 210462
        paymentType: string
        shippingDetailsPrefix: Values with length 255
      transaction:
        amount: 2000
        orderId: id14
        refOrderId: Values with length 30
        timeStamp: 2014-06-24T15:34:25.0000000+00:00
        transactionText: Initiate Payment
    type: object
    properties:
      customerInfo:
        $ref: '#/definitions/CustomerInfo'
      merchantInfo:
        $ref: '#/definitions/MerchantInfo'
      transaction:
        $ref: '#/definitions/Transaction'
    required:
    - customerInfo
    - merchantInfo
    - transaction
  CustomerInfo:
    title: CustomerInfo
    example:
      mobileNumber: 48059106
    type: object
    properties:
      mobileNumber:
        description: ''
        example: 48059106
        type: string
    required:
    - mobileNumber
  MerchantInfo:
    title: MerchantInfo
    example:
      authToken: Values with length 255
      callbackPrefix: https://www.domain.no/ecomm
      consentRemovalPrefix: Values with length 255
      fallBack: https://vecom-staging.vipps.io/api/v2/payments/fallBack
      isApp: false
      merchantSerialNumber: 210462
      paymentType: string
      shippingDetailsPrefix: Values with length 255
    type: object
    properties:
      authToken:
        description: ''
        example: Values with length 255
        type: string
      callbackPrefix:
        description: ''
        example: https://www.domain.no/ecomm
        type: string
      consentRemovalPrefix:
        description: ''
        example: Values with length 255
        type: string
      fallBack:
        description: ''
        example: https://vecom-staging.vipps.io/api/v2/payments/fallBack
        type: string
      isApp:
        description: ''
        example: false
        type: boolean
      merchantSerialNumber:
        description: ''
        example: 210462
        type: string
      paymentType:
        description: ''
        example: string
        type: string
      shippingDetailsPrefix:
        description: ''
        example: Values with length 255
        type: string
    required:
    - authToken
    - callbackPrefix
    - consentRemovalPrefix
    - fallBack
    - isApp
    - merchantSerialNumber
    - paymentType
    - shippingDetailsPrefix
  Transaction:
    title: Transaction
    example:
      amount: 2000
      orderId: id14
      refOrderId: Values with length 30
      timeStamp: 2014-06-24T15:34:25.0000000+00:00
      transactionText: Initiate Payment
    type: object
    properties:
      amount:
        description: ''
        example: 2000
        type: integer
        format: int32
      orderId:
        description: ''
        example: id14
        type: string
      refOrderId:
        description: ''
        example: Values with length 30
        type: string
      timeStamp:
        description: ''
        example: 6/24/2014 3:34:25 PM
        type: string
      transactionText:
        description: ''
        example: Initiate Payment
        type: string
    required:
    - amount
    - orderId
    - refOrderId
    - timeStamp
    - transactionText
